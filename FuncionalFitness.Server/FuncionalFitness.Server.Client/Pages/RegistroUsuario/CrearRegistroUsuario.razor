@page "/registro-usuario/crear"
@inject IHttpServicio Http
@inject NavigationManager navHttp
<h3>Crear Registro Usuario</h3>

<EditForm Model="registro" OnValidSubmit="Grabar">
   <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>nombre</label>
        <div>
        <InputText class="form-control" @bind-Value="registro.nombre" />
            <ValidationMessage For="@(() => registro.nombre)" />
        </div>
    </div>

    <div class="form-group">
    <label>apellido</label>
        <div>
        <InputText class="form-control" @bind-Value="registro.apellido" />
            <ValidationMessage For="@(() => registro.apellido)" />
        </div>
     </div>

     <div class="form-group">
        <label>dni</label>
        <div>
            <InputNumber class="form-control" @bind-Value="registro.dni"/>
            <ValidationMessage For="@(() => registro.dni)" />
        </div>
     </div>

    <div class="form-group">
        <label>gmail</label>
        <div>
            <InputText class="form-control" @bind-Value="registro.gmail" />
            <ValidationMessage For="@(() => registro.gmail)" />
        </div>
    </div>

    <div class="form-group">
        <label>edad</label>
        <div>
            <InputNumber class="form-control" @bind-Value="registro.edad" />
            <ValidationMessage For="@(() => registro.edad)" />
        </div>
    </div>

    <div class="form-group">
        <label>hora</label>
        <div>
            <InputText type="time" class="form-control" @bind-Value="registro.hora" />
            <ValidationMessage For="@(() => registro.hora)" />
        </div>
    </div>

    <div class="form-group">
        <label>dias</label>
        <div>
            <InputText class="form-control" @bind-Value="registro.dias" />
            <ValidationMessage For="@(() => registro.dias)" />
        </div>
    </div>

    <div class="form-group">
        <label>descripcion</label>
        <div>
            <InputText class="form-control" @bind-Value="registro.descripcion" />
            <ValidationMessage For="@(() => registro.descripcion)" />
        </div>
    </div>

    <div class="form-group">
        <label>estado</label>
        <div>
            <InputText class="form-control" @bind-Value="registro.estado" />
            <ValidationMessage For="@(() => registro.estado)" />
        </div>
    </div>

    <div class="form-group">
        <label>peso</label>
        <div>
            <InputNumber class="form-control" @bind-Value="registro.peso" />
            <ValidationMessage For="@(() => registro.peso)" />
        </div>
    </div>

    <div class="form-group">
        <label>altura</label>
        <div>
            <InputNumber class="form-control" @bind-Value="registro.altura" />
            <ValidationMessage For="@(() => registro.altura)" />
        </div>
    </div>

    <div class="form-group">
        <label>codigoingreso</label>
        <div>
            <InputNumber class="form-control" @bind-Value="registro.codigoingreso" />
            <ValidationMessage For="@(() => registro.codigoingreso)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Aceptar</button>
    <button class="btn btn-primary" @onclick="Cancelar">Cancelar</button>
</EditForm>
<br />
<p>@Mensaje</p>

@code {
    private RegistroUsuarioDTO registro = new RegistroUsuarioDTO();
    string Mensaje = "";

    private async Task Grabar()
    {
        var respuesta = await Http.Post<RegistroUsuarioDTO, int>("api/registrousuario", registro);
        if (!respuesta.Error)
        {
            navHttp.NavigateTo("/registro-usuario");
        }
        else
        {
            //var body = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            Mensaje = respuesta.OptenerError();
        }
    }

    private async Task Cancelar()
    { 
        navHttp.NavigateTo("/registro-usuario");
    }

}
